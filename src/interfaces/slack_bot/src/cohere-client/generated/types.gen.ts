// This file is auto-generated by @hey-api/openapi-ts

export type Body_upload_file_conversations_upload_file_post = {
  conversation_id?: string;
  file: Blob | File;
};

export type Body_upload_file_with_conversation_conversations__conversation_id__upload_file_post = {
  file: Blob | File;
};

export type Category = 'File loader' | 'Data loader' | 'Function';

/**
 * A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's message.
 */
export type ChatMessage = {
  role: ChatRole;
  message: string;
};

export type ChatResponseEvent = {
  event: StreamEvent;
  data:
    | StreamStart
    | StreamTextGeneration
    | StreamCitationGeneration
    | StreamQueryGeneration
    | StreamSearchResults
    | StreamEnd
    | StreamToolInput
    | StreamToolResult
    | StreamSearchQueriesGeneration
    | StreamToolCallsGeneration
    | NonStreamedChatResponse;
};

/**
 * One of CHATBOT|USER to identify who the message is coming from.
 */
export type ChatRole = 'CHATBOT' | 'USER';

export type Citation = {
  text: string;
  start: number;
  end: number;
  document_ids: Array<string>;
};

/**
 * Dictates how the prompt will be constructed. Defaults to "AUTO_PRESERVE_ORDER".
 */
export type CohereChatPromptTruncation = 'OFF' | 'AUTO_PRESERVE_ORDER';

/**
 * Request shape for Cohere Python SDK Streamed Chat.
 * See: https://github.com/cohere-ai/cohere-python/blob/main/src/cohere/base_client.py#L1629
 */
export type CohereChatRequest = {
  message: string;
  chat_history?: Array<ChatMessage> | null;
  conversation_id?: string;
  tools?: Array<Tool> | null;
  documents?: Array<{
    [key: string]: unknown;
  }>;
  model?: string | null;
  temperature?: number | null;
  k?: number | null;
  p?: number | null;
  preamble?: string | null;
  file_ids?: Array<string> | null;
  search_queries_only?: boolean | null;
  max_tokens?: number | null;
  seed?: number | null;
  stop_sequences?: Array<string> | null;
  presence_penalty?: number | null;
  frequency_penalty?: number | null;
  prompt_truncation?: CohereChatPromptTruncation;
};

export type Conversation = {
  user_id: string;
  id: string;
  created_at: string;
  updated_at: string;
  title: string;
  messages: Array<Message>;
  files: Array<File>;
  description: string | null;
  readonly total_file_size: number;
};

export type ConversationWithoutMessages = {
  user_id: string;
  id: string;
  created_at: string;
  updated_at: string;
  title: string;
  files: Array<File>;
  description: string | null;
  readonly total_file_size: number;
};

export type CreateUser = {
  fullname: string;
  email?: string | null;
};

export type DeleteConversation = unknown;

export type DeleteFile = unknown;

export type DeleteUser = unknown;

export type Deployment = {
  name: string;
  models: Array<string>;
  env_vars: Array<string>;
};

export type Document = {
  text: string;
  document_id: string;
  title: string | null;
  url: string | null;
};

export type File = {
  id: string;
  created_at: string;
  updated_at: string;
  user_id: string;
  conversation_id: string;
  file_name: string;
  file_path: string;
  file_size?: number;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

/**
 * Request shape for Langchain Streamed Chat.
 */
export type LangchainChatRequest = {
  message: string;
  chat_history?: Array<ChatMessage> | null;
  conversation_id?: string;
  tools?: Array<Tool> | null;
};

export type ListFile = {
  id: string;
  created_at: string;
  updated_at: string;
  user_id: string;
  conversation_id: string;
  file_name: string;
  file_path: string;
  file_size?: number;
};

export type ManagedTool = {
  name: string;
  description?: string | null;
  parameter_definitions?: {
    [key: string]: unknown;
  } | null;
  kwargs?: {
    [key: string]: unknown;
  };
  is_visible?: boolean;
  is_available?: boolean;
  error_message?: string | null;
  category?: Category;
};

export type Message = {
  text: string;
  id: string;
  created_at: string;
  updated_at: string;
  generation_id: string | null;
  position: number;
  is_active: boolean;
  documents: Array<Document>;
  citations: Array<Citation>;
  files: Array<File>;
  agent: MessageAgent;
};

export type MessageAgent = 'USER' | 'CHATBOT';

export type NonStreamedChatResponse = {
  is_finished: boolean;
  response_id: string | null;
  generation_id: string | null;
  chat_history: Array<ChatMessage> | null;
  finish_reason: string;
  text: string;
  citations?: Array<Citation> | null;
  documents?: Array<Document> | null;
  search_results?: Array<{
    [key: string]: unknown;
  }> | null;
  search_queries?: Array<SearchQuery> | null;
  conversation_id: string | null;
  tool_calls?: Array<ToolCall> | null;
};

export type SearchQuery = {
  text: string;
  generation_id: string;
};

/**
 * Stream citation generation event.
 */
export type StreamCitationGeneration = {
  is_finished: boolean;
  citations?: Array<Citation>;
};

export type StreamEnd = {
  response_id?: string | null;
  generation_id?: string | null;
  conversation_id?: string | null;
  text: string;
  citations?: Array<Citation>;
  documents?: Array<Document>;
  search_results?: Array<{
    [key: string]: unknown;
  }>;
  search_queries?: Array<SearchQuery>;
  tool_calls?: Array<ToolCall>;
  finish_reason: string;
};

/**
 * Stream Events returned by Cohere's chat stream response.
 */
export type StreamEvent =
  | 'stream-start'
  | 'search-queries-generation'
  | 'search-results'
  | 'tool-input'
  | 'tool-result'
  | 'text-generation'
  | 'citation-generation'
  | 'stream-end'
  | 'non-streamed-chat-response'
  | 'tool-calls-generation';

/**
 * Stream query generation event.
 */
export type StreamQueryGeneration = {
  is_finished: boolean;
  query: string;
};

/**
 * Stream queries generation event.
 */
export type StreamSearchQueriesGeneration = {
  is_finished: boolean;
  search_queries?: Array<SearchQuery>;
};

export type StreamSearchResults = {
  is_finished: boolean;
  search_results?: Array<{
    [key: string]: unknown;
  }>;
  documents?: Array<Document>;
};

/**
 * Stream start event.
 */
export type StreamStart = {
  is_finished: boolean;
  generation_id?: string | null;
  conversation_id?: string | null;
};

/**
 * Stream text generation event.
 */
export type StreamTextGeneration = {
  is_finished: boolean;
  text: string;
};

/**
 * Stream tool calls generation event.
 */
export type StreamToolCallsGeneration = {
  is_finished: boolean;
  tool_calls?: Array<ToolCall>;
};

export type StreamToolInput = {
  is_finished: boolean;
  input_type: ToolInputType;
  tool_name: string;
  input: string;
  text: string;
};

export type StreamToolResult = {
  is_finished: boolean;
  result: unknown;
  tool_name: string;
  documents?: Array<Document>;
};

export type Tool = {
  name: string;
  description?: string | null;
  parameter_definitions?: {
    [key: string]: unknown;
  } | null;
};

export type ToolCall = {
  name: string;
  parameters?: {
    [key: string]: unknown;
  };
};

/**
 * Type of input passed to the tool
 */
export type ToolInputType = 'QUERY' | 'CODE';

export type UpdateConversation = {
  title?: string | null;
  description?: string | null;
};

export type UpdateDeploymentEnv = {
  env_vars: {
    [key: string]: string;
  };
};

export type UpdateFile = {
  file_name?: string | null;
  message_id?: string | null;
};

export type UpdateUser = {
  fullname: string;
  email?: string | null;
};

export type UploadFile = {
  id: string;
  created_at: string;
  updated_at: string;
  user_id: string;
  conversation_id: string;
  file_name: string;
  file_path: string;
  file_size?: number;
};

export type User = {
  fullname: string;
  email?: string | null;
  id: string;
  created_at: string;
  updated_at: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type ChatStreamChatStreamPostData = {
  requestBody: CohereChatRequest;
};

export type ChatStreamChatStreamPostResponse = Array<ChatResponseEvent>;

export type ChatChatPostData = {
  /**
   * Select the deployment to use
   */
  deploymentName?: string;
  requestBody: CohereChatRequest;
};

export type ChatChatPostResponse = NonStreamedChatResponse;

export type LangchainChatStreamLangchainChatPostData = {
  requestBody: LangchainChatRequest;
};

export type LangchainChatStreamLangchainChatPostResponse = unknown;

export type CreateUserUsersPostData = {
  requestBody: CreateUser;
};

export type CreateUserUsersPostResponse = User;

export type ListUsersUsersGetData = {
  limit?: number;
  offset?: number;
};

export type ListUsersUsersGetResponse = Array<User>;

export type GetUserUsersUserIdGetData = {
  userId: string;
};

export type GetUserUsersUserIdGetResponse = User;

export type UpdateUserUsersUserIdPutData = {
  requestBody: UpdateUser;
  userId: string;
};

export type UpdateUserUsersUserIdPutResponse = User;

export type DeleteUserUsersUserIdDeleteData = {
  userId: string;
};

export type DeleteUserUsersUserIdDeleteResponse = DeleteUser;

export type GetConversationConversationsConversationIdGetData = {
  conversationId: string;
};

export type GetConversationConversationsConversationIdGetResponse = Conversation;

export type UpdateConversationConversationsConversationIdPutData = {
  conversationId: string;
  requestBody: UpdateConversation;
};

export type UpdateConversationConversationsConversationIdPutResponse = Conversation;

export type DeleteConversationConversationsConversationIdDeleteData = {
  conversationId: string;
};

export type DeleteConversationConversationsConversationIdDeleteResponse = DeleteConversation;

export type ListConversationsConversationsGetData = {
  limit?: number;
  offset?: number;
};

export type ListConversationsConversationsGetResponse = Array<ConversationWithoutMessages>;

export type UploadFileWithConversationConversationsConversationIdUploadFilePostData = {
  conversationId: string;
  formData: Body_upload_file_with_conversation_conversations__conversation_id__upload_file_post;
};

export type UploadFileWithConversationConversationsConversationIdUploadFilePostResponse =
  UploadFile;

export type UploadFileConversationsUploadFilePostData = {
  formData: Body_upload_file_conversations_upload_file_post;
};

export type UploadFileConversationsUploadFilePostResponse = UploadFile;

export type ListFilesConversationsConversationIdFilesGetData = {
  conversationId: string;
};

export type ListFilesConversationsConversationIdFilesGetResponse = Array<ListFile>;

export type UpdateFileConversationsConversationIdFilesFileIdPutData = {
  conversationId: string;
  fileId: string;
  requestBody: UpdateFile;
};

export type UpdateFileConversationsConversationIdFilesFileIdPutResponse = File;

export type DeleteFileConversationsConversationIdFilesFileIdDeleteData = {
  conversationId: string;
  fileId: string;
};

export type DeleteFileConversationsConversationIdFilesFileIdDeleteResponse = DeleteFile;

export type ListToolsToolsGetResponse = Array<ManagedTool>;

export type ListDeploymentsDeploymentsGetData = {
  all?: boolean;
};

export type ListDeploymentsDeploymentsGetResponse = Array<Deployment>;

export type SetEnvVarsDeploymentsNameSetEnvVarsPostData = {
  name: string;
  requestBody: UpdateDeploymentEnv;
};

export type SetEnvVarsDeploymentsNameSetEnvVarsPostResponse = unknown;

export type ListExperimentalFeaturesExperimentalFeaturesGetResponse = unknown;

export type HealthHealthGetResponse = unknown;

export type ApplyMigrationsMigratePostResponse = unknown;

export type $OpenApiTs = {
  '/chat-stream': {
    post: {
      req: {
        requestBody: CohereChatRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: Array<ChatResponseEvent>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/chat': {
    post: {
      req: {
        /**
         * Select the deployment to use
         */
        deploymentName?: string;
        requestBody: CohereChatRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: NonStreamedChatResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/langchain-chat': {
    post: {
      req: {
        requestBody: LangchainChatRequest;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/users/': {
    post: {
      req: {
        requestBody: CreateUser;
      };
      res: {
        /**
         * Successful Response
         */
        200: User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: {
        limit?: number;
        offset?: number;
      };
      res: {
        /**
         * Successful Response
         */
        200: Array<User>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/users/{user_id}': {
    get: {
      req: {
        userId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: {
        requestBody: UpdateUser;
        userId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        userId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: DeleteUser;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/conversations/{conversation_id}': {
    get: {
      req: {
        conversationId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: Conversation;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: {
        conversationId: string;
        requestBody: UpdateConversation;
      };
      res: {
        /**
         * Successful Response
         */
        200: Conversation;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        conversationId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: DeleteConversation;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/conversations/': {
    get: {
      req: {
        limit?: number;
        offset?: number;
      };
      res: {
        /**
         * Successful Response
         */
        200: Array<ConversationWithoutMessages>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/conversations/{conversation_id}/upload_file': {
    post: {
      req: {
        conversationId: string;
        formData: Body_upload_file_with_conversation_conversations__conversation_id__upload_file_post;
      };
      res: {
        /**
         * Successful Response
         */
        200: UploadFile;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/conversations/upload_file': {
    post: {
      req: {
        formData: Body_upload_file_conversations_upload_file_post;
      };
      res: {
        /**
         * Successful Response
         */
        200: UploadFile;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/conversations/{conversation_id}/files': {
    get: {
      req: {
        conversationId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: Array<ListFile>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/conversations/{conversation_id}/files/{file_id}': {
    put: {
      req: {
        conversationId: string;
        fileId: string;
        requestBody: UpdateFile;
      };
      res: {
        /**
         * Successful Response
         */
        200: File;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: {
        conversationId: string;
        fileId: string;
      };
      res: {
        /**
         * Successful Response
         */
        200: DeleteFile;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/tools/': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<ManagedTool>;
      };
    };
  };
  '/deployments/': {
    get: {
      req: {
        all?: boolean;
      };
      res: {
        /**
         * Successful Response
         */
        200: Array<Deployment>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/deployments/{name}/set_env_vars': {
    post: {
      req: {
        name: string;
        requestBody: UpdateDeploymentEnv;
      };
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/experimental_features/': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/health': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
  '/migrate': {
    post: {
      res: {
        /**
         * Successful Response
         */
        200: unknown;
      };
    };
  };
};
