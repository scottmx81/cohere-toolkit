// This file is auto-generated by @hey-api/openapi-ts
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { CancelablePromise } from './core/CancelablePromise';
import type {
  ApplyMigrationsMigratePostResponse,
  ChatChatPostData,
  ChatChatPostResponse,
  ChatStreamChatStreamPostData,
  ChatStreamChatStreamPostResponse,
  CreateUserUsersPostData,
  CreateUserUsersPostResponse,
  DeleteConversationConversationsConversationIdDeleteData,
  DeleteConversationConversationsConversationIdDeleteResponse,
  DeleteFileConversationsConversationIdFilesFileIdDeleteData,
  DeleteFileConversationsConversationIdFilesFileIdDeleteResponse,
  DeleteUserUsersUserIdDeleteData,
  DeleteUserUsersUserIdDeleteResponse,
  GetConversationConversationsConversationIdGetData,
  GetConversationConversationsConversationIdGetResponse,
  GetUserUsersUserIdGetData,
  GetUserUsersUserIdGetResponse,
  HealthHealthGetResponse,
  LangchainChatStreamLangchainChatPostData,
  LangchainChatStreamLangchainChatPostResponse,
  ListConversationsConversationsGetData,
  ListConversationsConversationsGetResponse,
  ListDeploymentsDeploymentsGetData,
  ListDeploymentsDeploymentsGetResponse,
  ListExperimentalFeaturesExperimentalFeaturesGetResponse,
  ListFilesConversationsConversationIdFilesGetData,
  ListFilesConversationsConversationIdFilesGetResponse,
  ListToolsToolsGetResponse,
  ListUsersUsersGetData,
  ListUsersUsersGetResponse,
  SetEnvVarsDeploymentsNameSetEnvVarsPostData,
  SetEnvVarsDeploymentsNameSetEnvVarsPostResponse,
  UpdateConversationConversationsConversationIdPutData,
  UpdateConversationConversationsConversationIdPutResponse,
  UpdateFileConversationsConversationIdFilesFileIdPutData,
  UpdateFileConversationsConversationIdFilesFileIdPutResponse,
  UpdateUserUsersUserIdPutData,
  UpdateUserUsersUserIdPutResponse,
  UploadFileConversationsUploadFilePostData,
  UploadFileConversationsUploadFilePostResponse,
  UploadFileWithConversationConversationsConversationIdUploadFilePostData,
  UploadFileWithConversationConversationsConversationIdUploadFilePostResponse,
} from './types.gen';

export class DefaultService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Chat Stream
   * Stream chat endpoint to handle user messages and return chatbot responses.
   *
   * Args:
   * session (DBSessionDep): Database session.
   * chat_request (CohereChatRequest): Chat request data.
   * request (Request): Request object.
   *
   * Returns:
   * EventSourceResponse: Server-sent event response with chatbot responses.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ChatResponseEvent Successful Response
   * @throws ApiError
   */
  public chatStreamChatStreamPost(
    data: ChatStreamChatStreamPostData,
  ): CancelablePromise<ChatStreamChatStreamPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/chat-stream',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Chat
   * Chat endpoint to handle user messages and return chatbot responses.
   *
   * Args:
   * chat_request (CohereChatRequest): Chat request data.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * NonStreamedChatResponse: Chatbot response.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.deploymentName Select the deployment to use
   * @returns NonStreamedChatResponse Successful Response
   * @throws ApiError
   */
  public chatChatPost(data: ChatChatPostData): CancelablePromise<ChatChatPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/chat',
      headers: {
        'Deployment-Name': data.deploymentName,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Langchain Chat Stream
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public langchainChatStreamLangchainChatPost(
    data: LangchainChatStreamLangchainChatPostData,
  ): CancelablePromise<LangchainChatStreamLangchainChatPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/langchain-chat',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create User
   * Create a new user.
   *
   * Args:
   * user (CreateUser): User data to be created.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * User: Created user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public createUserUsersPost(
    data: CreateUserUsersPostData,
  ): CancelablePromise<CreateUserUsersPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/users/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Users
   * List all users.
   *
   * Args:
   * offset (int): Offset to start the list.
   * limit (int): Limit of users to be listed.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * list[User]: List of users.
   * @param data The data for the request.
   * @param data.offset
   * @param data.limit
   * @returns User Successful Response
   * @throws ApiError
   */
  public listUsersUsersGet(
    data: ListUsersUsersGetData = {},
  ): CancelablePromise<ListUsersUsersGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/users/',
      query: {
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get User
   * Get a user by ID.
   *
   * Args:
   * user_id (str): User ID.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * User: User with the given ID.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId
   * @returns User Successful Response
   * @throws ApiError
   */
  public getUserUsersUserIdGet(
    data: GetUserUsersUserIdGetData,
  ): CancelablePromise<GetUserUsersUserIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update User
   * Update a user by ID.
   *
   * Args:
   * user_id (str): User ID.
   * new_user (UpdateUser): New user data.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * User: Updated user.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public updateUserUsersUserIdPut(
    data: UpdateUserUsersUserIdPutData,
  ): CancelablePromise<UpdateUserUsersUserIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete User
   * "
   * Delete a user by ID.
   *
   * Args:
   * user_id (str): User ID.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * DeleteUser: Empty response.
   *
   * Raises:
   * HTTPException: If the user with the given ID is not found.
   * @param data The data for the request.
   * @param data.userId
   * @returns DeleteUser Successful Response
   * @throws ApiError
   */
  public deleteUserUsersUserIdDelete(
    data: DeleteUserUsersUserIdDeleteData,
  ): CancelablePromise<DeleteUserUsersUserIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/users/{user_id}',
      path: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Conversation
   * "
   * Get a conversation by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * Conversation: Conversation with the given ID.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns Conversation Successful Response
   * @throws ApiError
   */
  public getConversationConversationsConversationIdGet(
    data: GetConversationConversationsConversationIdGetData,
  ): CancelablePromise<GetConversationConversationsConversationIdGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Conversation
   * Update a conversation by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * new_conversation (UpdateConversation): New conversation data.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * Conversation: Updated conversation.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.requestBody
   * @returns Conversation Successful Response
   * @throws ApiError
   */
  public updateConversationConversationsConversationIdPut(
    data: UpdateConversationConversationsConversationIdPutData,
  ): CancelablePromise<UpdateConversationConversationsConversationIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Conversation
   * Delete a conversation by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * DeleteConversation: Empty response.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns DeleteConversation Successful Response
   * @throws ApiError
   */
  public deleteConversationConversationsConversationIdDelete(
    data: DeleteConversationConversationsConversationIdDeleteData,
  ): CancelablePromise<DeleteConversationConversationsConversationIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/conversations/{conversation_id}',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Conversations
   * List all conversations.
   *
   * Args:
   * offset (int): Offset to start the list.
   * limit (int): Limit of conversations to be listed.
   * session (DBSessionDep): Database session.
   * request (Request): Request object.
   *
   * Returns:
   * list[ConversationWithoutMessages]: List of conversations.
   * @param data The data for the request.
   * @param data.offset
   * @param data.limit
   * @returns ConversationWithoutMessages Successful Response
   * @throws ApiError
   */
  public listConversationsConversationsGet(
    data: ListConversationsConversationsGetData = {},
  ): CancelablePromise<ListConversationsConversationsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/conversations/',
      query: {
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Upload File With Conversation
   * (TO BE DEPRECATED)
   *
   *
   * Uploads a file to a conversation.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * session (DBSessionDep): Database session.
   * file (FastAPIUploadFile): File to be uploaded.
   *
   * Returns:
   * UploadFile: Uploaded file.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found. Status code 404.
   * HTTPException: If the file wasn't uploaded correctly. Status code 500.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.formData
   * @returns UploadFile Successful Response
   * @throws ApiError
   */
  public uploadFileWithConversationConversationsConversationIdUploadFilePost(
    data: UploadFileWithConversationConversationsConversationIdUploadFilePostData,
  ): CancelablePromise<UploadFileWithConversationConversationsConversationIdUploadFilePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/conversations/{conversation_id}/upload_file',
      path: {
        conversation_id: data.conversationId,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Upload File
   * Uploads and creates a File object.
   * If no conversation_id is provided, a new Conversation is created as well.
   *
   * Args:
   * session (DBSessionDep): Database session.
   * file (FastAPIUploadFile): File to be uploaded.
   * conversation_id (Optional[str]): Conversation ID passed from request query parameter.
   *
   * Returns:
   * UploadFile: Uploaded file.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found. Status code 404.
   * HTTPException: If the file wasn't uploaded correctly. Status code 500.
   * @param data The data for the request.
   * @param data.formData
   * @returns UploadFile Successful Response
   * @throws ApiError
   */
  public uploadFileConversationsUploadFilePost(
    data: UploadFileConversationsUploadFilePostData,
  ): CancelablePromise<UploadFileConversationsUploadFilePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/conversations/upload_file',
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Files
   * List all files from a conversation. Important - no pagination support yet.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * list[ListFile]: List of files from the conversation.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @returns ListFile Successful Response
   * @throws ApiError
   */
  public listFilesConversationsConversationIdFilesGet(
    data: ListFilesConversationsConversationIdFilesGetData,
  ): CancelablePromise<ListFilesConversationsConversationIdFilesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/conversations/{conversation_id}/files',
      path: {
        conversation_id: data.conversationId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update File
   * Update a file by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * file_id (str): File ID.
   * new_file (UpdateFile): New file data.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * File: Updated file.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.fileId
   * @param data.requestBody
   * @returns File Successful Response
   * @throws ApiError
   */
  public updateFileConversationsConversationIdFilesFileIdPut(
    data: UpdateFileConversationsConversationIdFilesFileIdPutData,
  ): CancelablePromise<UpdateFileConversationsConversationIdFilesFileIdPutResponse> {
    return this.httpRequest.request({
      method: 'PUT',
      url: '/conversations/{conversation_id}/files/{file_id}',
      path: {
        conversation_id: data.conversationId,
        file_id: data.fileId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete File
   * Delete a file by ID.
   *
   * Args:
   * conversation_id (str): Conversation ID.
   * file_id (str): File ID.
   * session (DBSessionDep): Database session.
   *
   * Returns:
   * DeleteFile: Empty response.
   *
   * Raises:
   * HTTPException: If the conversation with the given ID is not found.
   * @param data The data for the request.
   * @param data.conversationId
   * @param data.fileId
   * @returns DeleteFile Successful Response
   * @throws ApiError
   */
  public deleteFileConversationsConversationIdFilesFileIdDelete(
    data: DeleteFileConversationsConversationIdFilesFileIdDeleteData,
  ): CancelablePromise<DeleteFileConversationsConversationIdFilesFileIdDeleteResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/conversations/{conversation_id}/files/{file_id}',
      path: {
        conversation_id: data.conversationId,
        file_id: data.fileId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Tools
   * List all available tools.
   *
   * Returns:
   * list[ManagedTool]: List of available tools.
   * @returns ManagedTool Successful Response
   * @throws ApiError
   */
  public listToolsToolsGet(): CancelablePromise<ListToolsToolsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/tools/',
    });
  }

  /**
   * List Deployments
   * List all available deployments and their models.
   *
   * Returns:
   * list[Deployment]: List of available deployment options.
   * @param data The data for the request.
   * @param data.all
   * @returns Deployment Successful Response
   * @throws ApiError
   */
  public listDeploymentsDeploymentsGet(
    data: ListDeploymentsDeploymentsGetData = {},
  ): CancelablePromise<ListDeploymentsDeploymentsGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/deployments/',
      query: {
        all: data.all,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Set Env Vars
   * Set environment variables for the deployment.
   *
   * Returns:
   * str: Empty string.
   * @param data The data for the request.
   * @param data.name
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public setEnvVarsDeploymentsNameSetEnvVarsPost(
    data: SetEnvVarsDeploymentsNameSetEnvVarsPostData,
  ): CancelablePromise<SetEnvVarsDeploymentsNameSetEnvVarsPostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/deployments/{name}/set_env_vars',
      path: {
        name: data.name,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Experimental Features
   * List all experimental features and if they are enabled
   *
   * Returns:
   * Dict[str, bool]: Experimental feature and their isEnabled state
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public listExperimentalFeaturesExperimentalFeaturesGet(): CancelablePromise<ListExperimentalFeaturesExperimentalFeaturesGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/experimental_features/',
    });
  }

  /**
   * Health
   * Health check for backend APIs
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public healthHealthGet(): CancelablePromise<HealthHealthGetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/health',
    });
  }

  /**
   * Apply Migrations
   * Applies Alembic migrations - useful for serverless applications
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public applyMigrationsMigratePost(): CancelablePromise<ApplyMigrationsMigratePostResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/migrate',
    });
  }
}
